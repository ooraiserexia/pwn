1.Blind ROP可以用于开启了ASLR、NX、和栈canary的64-bit linux
2.NX 为数据不可执行
3.PIE就是ASLR，地址随机化
4.RELRO用于减少可写区域，为Partial的时候表示GOT表可写

【1】RELRO：RELRO会有Partial RELRO和FULL RELRO，如果开启FULL RELRO，意味着我们无法修改got表
【2】Stack：如果栈中开启Canary found，那么就不能用直接用溢出的方法覆盖栈中返回地址，而且要通过改写指针与局部变量、leak canary、overwrite canary的方法来绕过
【3】NX：NX enabled如果这个保护开启就是意味着栈中数据没有执行权限，以前的经常用的call esp或者jmp esp的方法就不能使用，但是可以利用rop这种方法绕过
【4】PIE：PIE enabled如果程序开启这个地址随机化选项就意味着程序每次运行的时候地址都会变化，而如果没有开PIE的话那么No PIE (0x400000)，括号内的数据就是程序的基地址
【5】FORTIFY：FORTIFY_SOURCE机制对格式化字符串有两个限制(1)包含%n的格式化字符串不能位于程序内存中的可写地址。(2)当使用位置参数时，必须使用范围内的所有参数。所以如果要使用%7$x，你必须同时使用1,2,3,4,5和6。

5.unlink方式可以使得一个全局变量可以被控制，unlink可以利用向前合并，也可以利用向后合并，通过unlink造成内存写可以修改got表获取shell
6.覆盖printf@got，free@got，等指向的内存，从而获得system执行的shell
7.SROP伪造栈获得shell，看到特征syscall;ret可以考虑SROP
8.让指向可以被edit内存的指针被覆盖为我们想要控制的指针（比如GOT地址），然后再edit该内存可以获得shell
9.通过构造fake chunk将想覆盖的地址放入fastbin中，再申请fastbin，就可以获取希望覆盖的地址，从而getshell
10.修改main函数返回地址也可以getshell
11.通过信息泄漏获取canary的值可以绕过canary，从而通过覆盖返回地址getshell
